{"version":3,"file":"static/js/358.6ec2cadd.chunk.js","mappings":"gMACA,G,QAAA,CAAgB,KAAO,8BAA8B,MAAQ,+BAA+B,OAAS,gCAAgC,KAAO,8BAA8B,IAAM,6BAA6B,gBAAkB,yCAAyC,YAAc,qCAAqC,UAAY,mCAAmC,eAAiB,wCAAwC,YAAc,qCAAqC,WAAa,oCAAoC,aAAe,sCAAsC,YAAc,qCAAqC,MAAQ,iC,gDC2QvnB,EA1HwB,SAAC,GAA2B,IAAzBA,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UAE3BC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,KAAM,GACNC,IAAK,GACLC,KAAM,IAERC,iBAAkBC,EAAAA,GAAW,CAC3BJ,KAAMI,EAAAA,KACHC,IAAI,EAAG,2FACPC,SAAS,sGACZL,IAAKG,EAAAA,KACFG,QAAQ,QAAS,4JACjBF,IAAI,GAAI,kGACRC,SAAS,sGACZJ,KAAME,EAAAA,KACHC,IAAI,GAAI,kGACRC,SAAS,wGAEdE,SAAU,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAClCC,QAAQC,IAAIC,KAAKC,UAAUN,EAAQ,KAAM,IACzCO,YAAW,WACTN,GAAc,GACdC,MACC,KACHM,EAASR,MAIPQ,EAAQ,yCAAG,WAAOC,GAAP,uGAEUC,MA/Bf,8DA+B0B,CAChCC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMR,KAAKC,UAAUG,KAPV,cAEPK,EAFO,gBASQA,EAASC,OATjB,OASPC,EATO,OAUbb,QAAQC,IAAIY,GAVC,kDAYbb,QAAQc,MAAM,SAAd,MAZa,0DAAH,sDAgBd,OACE,gBACEC,UACEhC,EAASiC,IAAWC,EAAAA,MAAcA,EAAAA,QAAiBA,EAAAA,MAErDC,QAAS,kBAAMlC,GAAU,IAJ3B,UAME,gBAAK+B,UAAWE,EAAAA,KAAhB,UACE,gBAAKF,UAAWE,EAAAA,YAAhB,UACE,iBAAME,OAAO,IAAIX,OAAO,OAAOZ,SAAUX,EAAOmC,aAAhD,UACE,iBAAKL,UAAWE,EAAAA,eAAhB,WACE,eAAIF,UAAWE,EAAAA,UAAf,+FACA,iBAAKF,UAAWE,EAAAA,YAAhB,WACE,kBAAOI,QAAQ,UACf,kBACEN,UAAWE,EAAAA,KACXK,KAAK,OACLC,YAAY,qBACZnC,KAAK,OACLoC,MAAOvC,EAAOY,OAAOT,KACrBqC,SAAUxC,EAAOyC,aACjBC,OAAQ1C,EAAO2C,WACfV,QAAS,SAACW,GAAD,OAAOA,EAAEC,qBAEnB7C,EAAO8C,OAAO3C,MAAQH,EAAO+C,QAAQ5C,MACpC,gBAAK2B,UAAWE,EAAAA,MAAhB,SAA+BhC,EAAO8C,OAAO3C,OAC3C,MACJ,kBAAOiC,QAAQ,SACf,kBACEN,UAAWE,EAAAA,IACXK,KAAK,MACLC,YAAY,6CACZnC,KAAK,MACLoC,MAAOvC,EAAOY,OAAOR,IACrBoC,SAAUxC,EAAOyC,aACjBC,OAAQ1C,EAAO2C,WACfV,QAAS,SAACW,GAAD,OAAOA,EAAEC,qBAEnB7C,EAAO8C,OAAO1C,KAAOJ,EAAO+C,QAAQ3C,KACnC,gBAAK0B,UAAWE,EAAAA,MAAhB,SAA+BhC,EAAO8C,OAAO1C,MAC3C,MACJ,kBAAOgC,QAAQ,UACf,qBACEN,UAAWE,EAAAA,gBACXgB,KAAK,IACLV,YAAY,mIACZnC,KAAK,OACLoC,MAAOvC,EAAOY,OAAOP,KACrBmC,SAAUxC,EAAOyC,aACjBC,OAAQ1C,EAAO2C,WACfV,QAAS,SAACW,GAAD,OAAOA,EAAEC,qBAEnB7C,EAAO8C,OAAOzC,MAAQL,EAAO+C,QAAQ1C,MACpC,gBAAKyB,UAAWE,EAAAA,MAAhB,SAA+BhC,EAAO8C,OAAOzC,OAC3C,SAEN,iBAAKyB,UAAWE,EAAAA,WAAhB,WACE,mBACEF,UAAWE,EAAAA,aACXK,KAAK,SACLJ,QAAS,SAACW,GAAD,OAAOA,EAAEC,mBAHpB,UAKE,wFAEF,mBAAQf,UAAWE,EAAAA,YAAoBK,KAAK,SAA5C,UACE","sources":["webpack://skubenyk-module-3/./src/components/formAppointment/formAppointment.module.scss?b4c6","components/formAppointment/FormAppointment.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"icon\":\"formAppointment_icon__Pw6mB\",\"modal\":\"formAppointment_modal__2+8Ko\",\"active\":\"formAppointment_active__DfIZA\",\"form\":\"formAppointment_form__8BK6n\",\"tel\":\"formAppointment_tel__vaTvo\",\"formContentText\":\"formAppointment_formContentText__91rS5\",\"formWrapper\":\"formAppointment_formWrapper__rb8V1\",\"titleForm\":\"formAppointment_titleForm__CKSMn\",\"conntainerForm\":\"formAppointment_conntainerForm__h7iwz\",\"formContent\":\"formAppointment_formContent__z3n+l\",\"formButton\":\"formAppointment_formButton__9fmra\",\"buttonSubmit\":\"formAppointment_buttonSubmit__B-vzh\",\"buttonClose\":\"formAppointment_buttonClose__MvXpT\",\"error\":\"formAppointment_error__xFKv9\"};","// //*FormAppointment\r\n\r\n// // *Import base\r\n// import styles from './formAppointment.module.scss';\r\n// import classNames from 'classnames';\r\n\r\n// // *Import Formik libraries for creating forms\r\n// import { useFormik } from 'formik';\r\n\r\n// // *Import Yup libraries for validation forms\r\n// import * as Yup from 'yup';\r\n\r\n// const FormAppointment = ({ active, setActive }) => {\r\n//   //*Formik\r\n//   const formik = useFormik({\r\n//     initialValues: {\r\n//       name: '',\r\n//       tel: '',\r\n//       text: '',\r\n//     },\r\n//     //*Validation\r\n//     validationSchema: Yup.object({\r\n//       name: Yup.string()\r\n//         .min(2, 'Минимум 2 символова')\r\n//         .required('Обязательное поле!'),\r\n//       tel: Yup.number()\r\n//         .typeError('Неправильный номер телефона')\r\n//         .min(10, 'Минимум  10 символов')\r\n//         .required('Обязательное поле!'),\r\n//       text: Yup.string()\r\n//         .min(30, 'Минимум  30 символов')\r\n//         .required('Обязательное поле!'),\r\n//     }),\r\n//     onSubmit: (values, { setSubmitting, resetForm }) => {\r\n//       console.log(JSON.stringify(values, null, 2));\r\n//       setTimeout(() => {\r\n//         setSubmitting(false);\r\n//         resetForm();\r\n//       }, 400);\r\n//     },\r\n//   });\r\n\r\n//   return (\r\n//     <div\r\n//       //*Сonditions for switching styles in mode active\r\n//       className={\r\n//         active ? classNames(styles.modal, styles.active) : styles.modal\r\n//       }\r\n//       onClick={() => setActive(false)}\r\n//     >\r\n//       {/* Form */}\r\n//       <div className={styles.form}>\r\n//         <div className={styles.formWrapper}>\r\n//           <form\r\n//             action='#'\r\n//             method='post'\r\n//             onSubmit={formik.handleSubmit}\r\n//             data-netlify='true'\r\n//           >\r\n//             <div className={styles.conntainerForm}>\r\n//               {/* Title form */}\r\n//               <h2 className={styles.titleForm}>Запись на прием</h2>\r\n//               <div className={styles.formContent}>\r\n//                 {/* Name */}\r\n//                 <label htmlFor='name'></label>\r\n//                 <input\r\n//                   className={styles.name}\r\n//                   type='text'\r\n//                   placeholder='Имя'\r\n//                   name='name'\r\n//                   value={formik.values.name}\r\n//                   onChange={formik.handleChange}\r\n//                   onBlur={formik.handleBlur}\r\n//                   onClick={(e) => e.stopPropagation()}\r\n//                 />\r\n//                 {/* Conditions for including a style error */}\r\n//                 {formik.errors.name && formik.touched.name ? (\r\n//                   <div className={styles.error}>{formik.errors.name}</div>\r\n//                 ) : null}\r\n//                 {/* Telephone */}\r\n//                 <label htmlFor='tel'></label>\r\n//                 <input\r\n//                   className={styles.tel}\r\n//                   type='tel'\r\n//                   placeholder='Телефон'\r\n//                   name='tel'\r\n//                   value={formik.values.tel}\r\n//                   onChange={formik.handleChange}\r\n//                   onBlur={formik.handleBlur}\r\n//                   onClick={(e) => e.stopPropagation()}\r\n//                 />\r\n//                 {/* Conditions for including a style error */}\r\n//                 {formik.errors.tel && formik.touched.tel ? (\r\n//                   <div className={styles.error}>{formik.errors.tel}</div>\r\n//                 ) : null}\r\n//                 {/* Text */}\r\n//                 <label htmlFor='text'></label>\r\n//                 <textarea\r\n//                   className={styles.formContentText}\r\n//                   rows='8'\r\n//                   placeholder='Кратко опишите проблему'\r\n//                   name='text'\r\n//                   value={formik.values.text}\r\n//                   onChange={formik.handleChange}\r\n//                   onBlur={formik.handleBlur}\r\n//                   onClick={(e) => e.stopPropagation()}\r\n//                 />\r\n//                 {/* Conditions for including a style error */}\r\n//                 {formik.errors.text && formik.touched.text ? (\r\n//                   <div className={styles.error}>{formik.errors.text}</div>\r\n//                 ) : null}\r\n//               </div>\r\n//               {/* Buttons */}\r\n//               <div className={styles.formButton}>\r\n//                 <button\r\n//                   className={styles.buttonSubmit}\r\n//                   type='submit'\r\n//                   onClick={(e) => e.stopPropagation()}\r\n//                 >\r\n//                   <span>ОТПРАВИТЬ</span>\r\n//                 </button>\r\n//                 <button\r\n//                   //*Close form\r\n//                   className={styles.buttonClose}\r\n//                   type='button'\r\n//                 >\r\n//                   <span>ЗАКРЫТЬ</span>\r\n//                 </button>\r\n//               </div>\r\n//             </div>\r\n//           </form>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default FormAppointment;\r\n\r\n// ! Компонент з відправкою даних форми на пошту\r\nimport React from 'react';\r\nimport styles from './formAppointment.module.scss';\r\nimport classNames from 'classnames';\r\nimport { useFormik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nconst FormAppointment = ({ active, setActive }) => {\r\n  const URL = 'https://vetclinic-backend.onrender.com/api/users/send-email';\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      name: '',\r\n      tel: '',\r\n      text: '',\r\n    },\r\n    validationSchema: Yup.object({\r\n      name: Yup.string()\r\n        .min(2, 'Минимум 2 символа')\r\n        .required('Обязательное поле!'),\r\n      tel: Yup.string()\r\n        .matches(/^\\d+$/, 'Неправильный номер телефона')\r\n        .min(10, 'Минимум 10 символов')\r\n        .required('Обязательное поле!'),\r\n      text: Yup.string()\r\n        .min(30, 'Минимум 30 символов')\r\n        .required('Обязательное поле!'),\r\n    }),\r\n    onSubmit: (values, { setSubmitting, resetForm }) => {\r\n      console.log(JSON.stringify(values, null, 2));\r\n      setTimeout(() => {\r\n        setSubmitting(false);\r\n        resetForm();\r\n      }, 400);\r\n      sendData(values);\r\n    },\r\n  });\r\n\r\n  const sendData = async (formData) => {\r\n    try {\r\n      const response = await fetch(URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n      const result = await response.json();\r\n      console.log(result);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        active ? classNames(styles.modal, styles.active) : styles.modal\r\n      }\r\n      onClick={() => setActive(false)}\r\n    >\r\n      <div className={styles.form}>\r\n        <div className={styles.formWrapper}>\r\n          <form action='#' method='post' onSubmit={formik.handleSubmit}>\r\n            <div className={styles.conntainerForm}>\r\n              <h2 className={styles.titleForm}>Запись на прием</h2>\r\n              <div className={styles.formContent}>\r\n                <label htmlFor='name'></label>\r\n                <input\r\n                  className={styles.name}\r\n                  type='text'\r\n                  placeholder='Имя'\r\n                  name='name'\r\n                  value={formik.values.name}\r\n                  onChange={formik.handleChange}\r\n                  onBlur={formik.handleBlur}\r\n                  onClick={(e) => e.stopPropagation()}\r\n                />\r\n                {formik.errors.name && formik.touched.name ? (\r\n                  <div className={styles.error}>{formik.errors.name}</div>\r\n                ) : null}\r\n                <label htmlFor='tel'></label>\r\n                <input\r\n                  className={styles.tel}\r\n                  type='tel'\r\n                  placeholder='Телефон'\r\n                  name='tel'\r\n                  value={formik.values.tel}\r\n                  onChange={formik.handleChange}\r\n                  onBlur={formik.handleBlur}\r\n                  onClick={(e) => e.stopPropagation()}\r\n                />\r\n                {formik.errors.tel && formik.touched.tel ? (\r\n                  <div className={styles.error}>{formik.errors.tel}</div>\r\n                ) : null}\r\n                <label htmlFor='text'></label>\r\n                <textarea\r\n                  className={styles.formContentText}\r\n                  rows='8'\r\n                  placeholder='Кратко опишите проблему'\r\n                  name='text'\r\n                  value={formik.values.text}\r\n                  onChange={formik.handleChange}\r\n                  onBlur={formik.handleBlur}\r\n                  onClick={(e) => e.stopPropagation()}\r\n                />\r\n                {formik.errors.text && formik.touched.text ? (\r\n                  <div className={styles.error}>{formik.errors.text}</div>\r\n                ) : null}\r\n              </div>\r\n              <div className={styles.formButton}>\r\n                <button\r\n                  className={styles.buttonSubmit}\r\n                  type='submit'\r\n                  onClick={(e) => e.stopPropagation()}\r\n                >\r\n                  <span>ОТПРАВИТЬ</span>\r\n                </button>\r\n                <button className={styles.buttonClose} type='button'>\r\n                  <span>ЗАКРЫТЬ</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormAppointment;\r\n"],"names":["active","setActive","formik","useFormik","initialValues","name","tel","text","validationSchema","Yup","min","required","matches","onSubmit","values","setSubmitting","resetForm","console","log","JSON","stringify","setTimeout","sendData","formData","fetch","method","headers","body","response","json","result","error","className","classNames","styles","onClick","action","handleSubmit","htmlFor","type","placeholder","value","onChange","handleChange","onBlur","handleBlur","e","stopPropagation","errors","touched","rows"],"sourceRoot":""}